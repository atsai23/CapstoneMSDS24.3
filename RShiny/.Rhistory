stringsAsFactors = FALSE)
})
# Show the values in an HTML table ----
output$values <- renderTable({
sliderValues()
})
}
shinyApp(ui = ui, server = server)
library (shiny)
# Define UI for slider demo app ----
ui <- fluidPage(
# App title ----
titlePanel("Sliders"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar to demonstrate various slider options ----
sidebarPanel(
# Input: Simple integer interval ----
sliderInput("integer", "Integer:",
min = 0, max = 1000,
value = 500),
# Input: Decimal interval with step value ----
sliderInput("decimal", "Decimal:",
min = 0, max = 1,
value = 0.5, step = 0.1),
# Input: Specification of range within an interval ----
sliderInput("range", "Range:",
min = 1, max = 1000,
value = c(200,500)),
# Input: Custom currency format for with basic animation ----
sliderInput("format", "Custom Format:",
min = 0, max = 10000,
value = 0, step = 2500,
pre = "$", sep = ",",
animate = TRUE),
# Input: Animation with custom interval (in ms) ----
# to control speed, plus looping
sliderInput("animation", "Looping Animation:",
min = 1, max = 2000,
value = 1, step = 10,
animate =
animationOptions(interval = 300, loop = TRUE))
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Table summarizing the values entered ----
tableOutput("values")
)
)
)
# Define server logic for slider examples ----
server <- function(input, output) {
# Reactive expression to create data frame of all input values ----
sliderValues <- reactive({
data.frame(
Name = c("Integer",
"Decimal",
"Range",
"Custom Format",
"Animation"),
Value = as.character(c(input$integer,
input$decimal,
input$range[1]),
input$format,
input$animation)),
library (shiny)
# Define UI for slider demo app ----
ui <- fluidPage(
# App title ----
titlePanel("Sliders"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar to demonstrate various slider options ----
sidebarPanel(
# Input: Simple integer interval ----
sliderInput("integer", "Integer:",
min = 0, max = 1000,
value = 500),
# Input: Decimal interval with step value ----
sliderInput("decimal", "Decimal:",
min = 0, max = 1,
value = 0.5, step = 0.1),
# Input: Specification of range within an interval ----
sliderInput("range", "Range:",
min = 1, max = 1000,
value = c(200,500)),
# Input: Custom currency format for with basic animation ----
sliderInput("format", "Custom Format:",
min = 0, max = 10000,
value = 0, step = 2500,
pre = "$", sep = ",",
animate = TRUE),
# Input: Animation with custom interval (in ms) ----
# to control speed, plus looping
sliderInput("animation", "Looping Animation:",
min = 1, max = 2000,
value = 1, step = 10,
animate =
animationOptions(interval = 300, loop = TRUE))
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Table summarizing the values entered ----
tableOutput("values")
)
)
)
# Define server logic for slider examples ----
server <- function(input, output) {
# Reactive expression to create data frame of all input values ----
sliderValues <- reactive({
data.frame(
Name = c("Integer",
"Decimal",
"Range",
"Custom Format",
"Animation"),
Value = as.character(c(input$integer,
input$decimal,
input$range[1],
input$format,
input$animation)),
stringsAsFactors = FALSE)
})
# Show the values in an HTML table ----
output$values <- renderTable({
sliderValues()
})
}
shinyApp(ui = ui, server = server)
sites <- read_xlsx('data/Temperature Site Names.xlsx')
library(shiny)
library(tidyverse)
library(DT)
sites <- read_xlsx('data/Temperature Site Names.xlsx')
library(shiny)
library(readxl)
library(tidyverse)
library(DT)
sites <- read_xlsx('data/Temperature Site Names.xlsx')
temp <- read.csv('data/daily-avg-tmp.csv')
test <- sites[15:30, "Temp_Alias"]
temp2 <- temp %>% filter(Site %in% sites[15:30, "Temp_Alias"]$Temp_Alias) %>% select(Date:Temp)
View(temp2)
View(temp)
View(sites)
View(test)
test <- sites %>% filter(RKM < 15 %and% RKM > 30) %>% select(Date:Temp)
test <- sites %>% filter(between(RKM, 15, 30)) %>% select(Date:Temp)
test <- sites %>% filter(between(sites$RKM, 15, 30)) %>% select(Date:Temp)
test <- sites %>% filter(between(sites$RKM, 15, 30)) %>% select()
#temp2 <- temp %>% filter(Site %in% sites[15:30, "Temp_Alias"]$Temp_Alias) %>% select(Date:Temp)
View(test)
View(sites)
test <- sites %>% filter(between(sites$RKM, 15, 30)) %>% select(SITE_NO:ALT_NAME)
#temp2 <- temp %>% filter(Site %in% sites[15:30, "Temp_Alias"]$Temp_Alias) %>% select(Date:Temp)
View(test)
test <- sites %>% filter(between(sites$RKM, 15, 30)) %>% select(Temp_Alias)
temp2 <- temp %>% filter(Site %in% test) %>% select(Date:Temp)
View(temp2)
test <- sites %>% filter(between(sites$RKM, 15, 30)) %>% select(Temp_Alias)
temp2 <- temp %>% filter(Site %in% test$Temp_Alias) %>% select(Date:Temp)
View(temp2)
test <- c(sites %>% filter(between(sites$RKM, 15, 30)) %>% select(Temp_Alias))
#temp2 <- temp %>% filter(Site %in% test$Temp_Alias) %>% select(Date:Temp)
View(test)
test <- list(sites %>% filter(between(sites$RKM, 15, 30)) %>% select(Temp_Alias))
#temp2 <- temp %>% filter(Site %in% test$Temp_Alias) %>% select(Date:Temp)
View(test)
test <- sites %>% filter(between(sites$RKM, 15, 30)) %>% select(Temp_Alias)
test2 <- test2$Temp_Alais
test2 <- test2$Temp_Alias
test <- sites %>% filter(between(sites$RKM, 15, 30)) %>% select(Temp_Alias)
test2 <- test2$Temp_Alias
test <- sites %>% filter(between(sites$RKM, 15, 30)) %>% select(Temp_Alias)
test2 <- test$Temp_Alias
#temp2 <- temp %>% filter(Site %in% test$Temp_Alias) %>% select(Date:Temp)
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/testfilters.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/testfilters.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/testfilters.R')
thing <- sort(unique(ites$Temp_Alias))
thing <- sort(unique(sites$Temp_Alias))
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/testfilters.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/testfilters.R')
data.frame(
Name = c("Integer",
"Decimal",
"Range",
"Custom Format",
"Animation"),
Value = as.character(c(input$integer,
input$decimal,
input$range[1],
input$format,
input$animation)),
stringsAsFactors = FALSE)
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/testfilters.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/testfilters.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/testfilters.R')
max(temp$Date)
sites <- read_xlsx('data/Temperature Site Names.xlsx')
temp <- read.csv('data/daily-avg-tmp.csv')
temp <- mutate(temp, Date = as.Date(Date, format = "%Y-%m-%d"))
max(temp$Date)
min(temp$Date)
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/testfilters.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/testfilters.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/testfilters.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/testfilters.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/testfilters.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/testfilters.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/testfilters.R')
a = as.Date('2015-12-01')
b = as.Date('2016-12-01')
a = as.Date('2015-12-01')
b = as.Date('2016-12-01')
temp %>% filter(between(temp$date, a, b)) %>%
select(Date:Temp)
temp %>% filter(between(temp$date, a, b)) %>% select(Date:Temp)
temp %>% filter(between(temp$Date, a, b)) %>% select(Date:Temp)
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/testfilters.R')
library(shiny); runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/combined_app.R')
sites <- read_xlsx('data/Temperature Site Names.xlsx')
library(shiny)
library(readxl)
library(tidyverse)
library(DT)
library (dygraphs)
sites <- read_xlsx('data/Temperature Site Names.xlsx')
temp <- read.csv('data/daily-avg-tmp.csv')
View(sites)
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/testfilters.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/testfilters.R')
test <- sites %>% filter(SECTION == 'Estuary")
test <- sites %>% filter(SECTION == 'Estuary")
test <- sites %>% filter(SECTION == 'Estuary')
View(test)
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/testfilters.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/testfilters.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/testfilters.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/testfilters.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/testfilters.R')
test <- sites %>% filter(SECTION == 'Estuary') %>% select(Temp_Alias)
View(test)
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/testfilters.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/testfilters.R')
library(shiny)
library(readxl)
library(tidyverse)
library(DT)
library (dygraphs)
sites <- read_xlsx('data/Temperature Site Names.xlsx')
temp <- read.csv('data/daily-avg-tmp.csv')
temp_small <- temp %>% filter(Site == 'MS03' | Site == 'MS04')
temp_wide <- temp %>% pivot_wider(names_from = Site, values_from = Temp)
View(temp_wide)
subcols <- temp_wide %>% mutate(cols = pick('BO01', 'FP01'))
View(subcols)
temp_wide %>% mutate(cols = pick('BO01', 'FP01'))
temp_wide %>% select('BO01', 'FP01')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/testfilters.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/testfilters.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/testfilters.R')
temptest <- readRDS('temptest.rds')
dygraph(temp_wide) %>% dyRangeSelector()
dygraph(temptest) %>% dyRangeSelector()
sites <- read_xlsx('data/Temperature Site Names.xlsx')
temp <- read.csv('data/daily-avg-tmp.csv')
temp_small <- temp %>% filter(Site == 'MS03' | Site == 'MS04')
temp_wide <- temp %>% pivot_wider(names_from = Site, values_from = Temp)
temp_wide %>% select(sites)
sites <- c('BO01', 'FP01')
temp_wide %>% select(sites)
sites <- c('BO01', 'FP01')
temp_wide %>% select(sites, 'Date')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/testfilters.R')
mean(temp_wide)
colMeans(temp_wide[sapply(temp_wide, is.numeric)])
sites <- c('BO01', 'FP01')
temp_wide %>% select(sites, 'Date')
sites <- c('BO01', 'FP01')
small <- temp_wide %>% select(sites, 'Date')
small <- small %>% mutate(cols = pick('BO01', 'FP01'))
View(small)
small <- small %>% mutate(cols = mean(pick('BO01', 'FP01')))
View(small)
small %>%
rowwise() %>%
mutate(test_mean = mean(c_across(c('BO01', 'FP01')), na.rm=TRUE))
bah <- small %>%
rowwise() %>%
mutate(test_mean = mean(c_across(c('BO01', 'FP01')), na.rm=TRUE))
View(bah)
View(bah)
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/testfilters.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/testfilters.R')
library(shiny); runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/bslibtest.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/bslibtest.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/bslibtest.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/bslibtest.R')
install.packages("bsicons")
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/bslibtest.R')
install.packages(c("askpass", "blob", "boot", "broom", "bslib", "cachem", "callr", "class", "cli", "clock", "cluster", "codetools", "colorspace", "commonmark", "config", "cpp11", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "digest", "dplyr", "DT", "dtplyr", "e1071", "evaluate", "fansi", "forcats", "foreign", "fs", "future", "future.apply", "gam", "gapminder", "gargle", "gbm", "ggplot2", "ggrepel", "glmnet", "globals", "glue", "googledrive", "googlesheets4", "gplots", "gtable", "gtools", "hardhat", "haven", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "infer", "janitor", "jsonlite", "keras", "KernSmooth", "knitr", "labeling", "later", "lattice", "lava", "leaflet", "lifecycle", "listenv", "lubridate", "markdown", "MASS", "Matrix", "mgcv", "modelr", "munsell", "naniar", "nlme", "nnet", "norm", "openssl", "packrat", "parallelly", "patchwork", "plotly", "pls", "plyr", "prettyunits", "pROC", "processx", "prodlim", "progress", "progressr", "promises", "ps", "purrr", "RcppEigen", "readr", "readxl", "recipes", "rematch", "reprex", "reticulate", "rlang", "rmarkdown", "rpart", "rpart.plot", "rprojroot", "rsconnect", "rstudioapi", "rvest", "sass", "scales", "sf", "shape", "shiny", "signal", "snakecase", "sp", "spatial", "stringi", "stringr", "survival", "sys", "tensorflow", "terra", "tfruns", "tictoc", "tidyr", "tidyselect", "tidyverse", "timechange", "timeDate", "tinytex", "tzdb", "utf8", "uuid", "vctrs", "viridis", "viridisLite", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("askpass", "blob", "boot", "broom", "bslib", "cachem", "callr", "class", "cli", "clock", "cluster", "codetools", "colorspace", "commonmark", "config", "cpp11", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "digest", "dplyr", "DT", "dtplyr", "e1071", "evaluate", "fansi", "forcats", "foreign", "fs", "future", "future.apply", "gam", "gapminder", "gargle", "gbm", "ggplot2", "ggrepel", "glmnet", "globals", "glue", "googledrive", "googlesheets4", "gplots", "gtable", "gtools", "hardhat", "haven", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "infer", "janitor", "jsonlite", "keras", "KernSmooth", "knitr", "labeling", "later", "lattice", "lava", "leaflet", "lifecycle", "listenv", "lubridate", "markdown", "MASS", "Matrix", "mgcv", "modelr", "munsell", "naniar", "nlme", "nnet", "norm", "openssl", "packrat", "parallelly", "patchwork", "plotly", "pls", "plyr", "prettyunits", "pROC", "processx", "prodlim", "progress", "progressr", "promises", "ps", "purrr", "RcppEigen", "readr", "readxl", "recipes", "rematch", "reprex", "reticulate", "rlang", "rmarkdown", "rpart", "rpart.plot", "rprojroot", "rsconnect", "rstudioapi", "rvest", "sass", "scales", "sf", "shape", "shiny", "signal", "snakecase", "sp", "spatial", "stringi", "stringr", "survival", "sys", "tensorflow", "terra", "tfruns", "tictoc", "tidyr", "tidyselect", "tidyverse", "timechange", "timeDate", "tinytex", "tzdb", "utf8", "uuid", "vctrs", "viridis", "viridisLite", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("askpass", "blob", "boot", "broom", "bslib", "cachem", "callr", "class", "cli", "clock", "cluster", "codetools", "colorspace", "commonmark", "config", "cpp11", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "digest", "dplyr", "DT", "dtplyr", "e1071", "evaluate", "fansi", "forcats", "foreign", "fs", "future", "future.apply", "gam", "gapminder", "gargle", "gbm", "ggplot2", "ggrepel", "glmnet", "globals", "glue", "googledrive", "googlesheets4", "gplots", "gtable", "gtools", "hardhat", "haven", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "infer", "janitor", "jsonlite", "keras", "KernSmooth", "knitr", "labeling", "later", "lattice", "lava", "leaflet", "lifecycle", "listenv", "lubridate", "markdown", "MASS", "Matrix", "mgcv", "modelr", "munsell", "naniar", "nlme", "nnet", "norm", "openssl", "packrat", "parallelly", "patchwork", "plotly", "pls", "plyr", "prettyunits", "pROC", "processx", "prodlim", "progress", "progressr", "promises", "ps", "purrr", "RcppEigen", "readr", "readxl", "recipes", "rematch", "reprex", "reticulate", "rlang", "rmarkdown", "rpart", "rpart.plot", "rprojroot", "rsconnect", "rstudioapi", "rvest", "sass", "scales", "sf", "shape", "shiny", "signal", "snakecase", "sp", "spatial", "stringi", "stringr", "survival", "sys", "tensorflow", "terra", "tfruns", "tictoc", "tidyr", "tidyselect", "tidyverse", "timechange", "timeDate", "tinytex", "tzdb", "utf8", "uuid", "vctrs", "viridis", "viridisLite", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("askpass", "blob", "boot", "broom", "bslib", "cachem", "callr", "class", "cli", "clock", "cluster", "codetools", "colorspace", "commonmark", "config", "cpp11", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "digest", "dplyr", "DT", "dtplyr", "e1071", "evaluate", "fansi", "forcats", "foreign", "fs", "future", "future.apply", "gam", "gapminder", "gargle", "gbm", "ggplot2", "ggrepel", "glmnet", "globals", "glue", "googledrive", "googlesheets4", "gplots", "gtable", "gtools", "hardhat", "haven", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "infer", "janitor", "jsonlite", "keras", "KernSmooth", "knitr", "labeling", "later", "lattice", "lava", "leaflet", "lifecycle", "listenv", "lubridate", "markdown", "MASS", "Matrix", "mgcv", "modelr", "munsell", "naniar", "nlme", "nnet", "norm", "openssl", "packrat", "parallelly", "patchwork", "plotly", "pls", "plyr", "prettyunits", "pROC", "processx", "prodlim", "progress", "progressr", "promises", "ps", "purrr", "RcppEigen", "readr", "readxl", "recipes", "rematch", "reprex", "reticulate", "rlang", "rmarkdown", "rpart", "rpart.plot", "rprojroot", "rsconnect", "rstudioapi", "rvest", "sass", "scales", "sf", "shape", "shiny", "signal", "snakecase", "sp", "spatial", "stringi", "stringr", "survival", "sys", "tensorflow", "terra", "tfruns", "tictoc", "tidyr", "tidyselect", "tidyverse", "timechange", "timeDate", "tinytex", "tzdb", "utf8", "uuid", "vctrs", "viridis", "viridisLite", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("askpass", "blob", "boot", "broom", "bslib", "cachem", "callr", "class", "cli", "clock", "cluster", "codetools", "colorspace", "commonmark", "config", "cpp11", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "digest", "dplyr", "DT", "dtplyr", "e1071", "evaluate", "fansi", "forcats", "foreign", "fs", "future", "future.apply", "gam", "gapminder", "gargle", "gbm", "ggplot2", "ggrepel", "glmnet", "globals", "glue", "googledrive", "googlesheets4", "gplots", "gtable", "gtools", "hardhat", "haven", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "infer", "janitor", "jsonlite", "keras", "KernSmooth", "knitr", "labeling", "later", "lattice", "lava", "leaflet", "lifecycle", "listenv", "lubridate", "markdown", "MASS", "Matrix", "mgcv", "modelr", "munsell", "naniar", "nlme", "nnet", "norm", "openssl", "packrat", "parallelly", "patchwork", "plotly", "pls", "plyr", "prettyunits", "pROC", "processx", "prodlim", "progress", "progressr", "promises", "ps", "purrr", "RcppEigen", "readr", "readxl", "recipes", "rematch", "reprex", "reticulate", "rlang", "rmarkdown", "rpart", "rpart.plot", "rprojroot", "rsconnect", "rstudioapi", "rvest", "sass", "scales", "sf", "shape", "shiny", "signal", "snakecase", "sp", "spatial", "stringi", "stringr", "survival", "sys", "tensorflow", "terra", "tfruns", "tictoc", "tidyr", "tidyselect", "tidyverse", "timechange", "timeDate", "tinytex", "tzdb", "utf8", "uuid", "vctrs", "viridis", "viridisLite", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("askpass", "blob", "boot", "broom", "bslib", "cachem", "callr", "class", "cli", "clock", "cluster", "codetools", "colorspace", "commonmark", "config", "cpp11", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "digest", "dplyr", "DT", "dtplyr", "e1071", "evaluate", "fansi", "forcats", "foreign", "fs", "future", "future.apply", "gam", "gapminder", "gargle", "gbm", "ggplot2", "ggrepel", "glmnet", "globals", "glue", "googledrive", "googlesheets4", "gplots", "gtable", "gtools", "hardhat", "haven", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "infer", "janitor", "jsonlite", "keras", "KernSmooth", "knitr", "labeling", "later", "lattice", "lava", "leaflet", "lifecycle", "listenv", "lubridate", "markdown", "MASS", "Matrix", "mgcv", "modelr", "munsell", "naniar", "nlme", "nnet", "norm", "openssl", "packrat", "parallelly", "patchwork", "plotly", "pls", "plyr", "prettyunits", "pROC", "processx", "prodlim", "progress", "progressr", "promises", "ps", "purrr", "RcppEigen", "readr", "readxl", "recipes", "rematch", "reprex", "reticulate", "rlang", "rmarkdown", "rpart", "rpart.plot", "rprojroot", "rsconnect", "rstudioapi", "rvest", "sass", "scales", "sf", "shape", "shiny", "signal", "snakecase", "sp", "spatial", "stringi", "stringr", "survival", "sys", "tensorflow", "terra", "tfruns", "tictoc", "tidyr", "tidyselect", "tidyverse", "timechange", "timeDate", "tinytex", "tzdb", "utf8", "uuid", "vctrs", "viridis", "viridisLite", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("askpass", "blob", "boot", "broom", "bslib", "cachem", "callr", "class", "cli", "clock", "cluster", "codetools", "colorspace", "commonmark", "config", "cpp11", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "digest", "dplyr", "DT", "dtplyr", "e1071", "evaluate", "fansi", "forcats", "foreign", "fs", "future", "future.apply", "gam", "gapminder", "gargle", "gbm", "ggplot2", "ggrepel", "glmnet", "globals", "glue", "googledrive", "googlesheets4", "gplots", "gtable", "gtools", "hardhat", "haven", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "infer", "janitor", "jsonlite", "keras", "KernSmooth", "knitr", "labeling", "later", "lattice", "lava", "leaflet", "lifecycle", "listenv", "lubridate", "markdown", "MASS", "Matrix", "mgcv", "modelr", "munsell", "naniar", "nlme", "nnet", "norm", "openssl", "packrat", "parallelly", "patchwork", "plotly", "pls", "plyr", "prettyunits", "pROC", "processx", "prodlim", "progress", "progressr", "promises", "ps", "purrr", "RcppEigen", "readr", "readxl", "recipes", "rematch", "reprex", "reticulate", "rlang", "rmarkdown", "rpart", "rpart.plot", "rprojroot", "rsconnect", "rstudioapi", "rvest", "sass", "scales", "sf", "shape", "shiny", "signal", "snakecase", "sp", "spatial", "stringi", "stringr", "survival", "sys", "tensorflow", "terra", "tfruns", "tictoc", "tidyr", "tidyselect", "tidyverse", "timechange", "timeDate", "tinytex", "tzdb", "utf8", "uuid", "vctrs", "viridis", "viridisLite", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("askpass", "blob", "boot", "broom", "bslib", "cachem", "callr", "class", "cli", "clock", "cluster", "codetools", "colorspace", "commonmark", "config", "cpp11", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "digest", "dplyr", "DT", "dtplyr", "e1071", "evaluate", "fansi", "forcats", "foreign", "fs", "future", "future.apply", "gam", "gapminder", "gargle", "gbm", "ggplot2", "ggrepel", "glmnet", "globals", "glue", "googledrive", "googlesheets4", "gplots", "gtable", "gtools", "hardhat", "haven", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "infer", "janitor", "jsonlite", "keras", "KernSmooth", "knitr", "labeling", "later", "lattice", "lava", "leaflet", "lifecycle", "listenv", "lubridate", "markdown", "MASS", "Matrix", "mgcv", "modelr", "munsell", "naniar", "nlme", "nnet", "norm", "openssl", "packrat", "parallelly", "patchwork", "plotly", "pls", "plyr", "prettyunits", "pROC", "processx", "prodlim", "progress", "progressr", "promises", "ps", "purrr", "RcppEigen", "readr", "readxl", "recipes", "rematch", "reprex", "reticulate", "rlang", "rmarkdown", "rpart", "rpart.plot", "rprojroot", "rsconnect", "rstudioapi", "rvest", "sass", "scales", "sf", "shape", "shiny", "signal", "snakecase", "sp", "spatial", "stringi", "stringr", "survival", "sys", "tensorflow", "terra", "tfruns", "tictoc", "tidyr", "tidyselect", "tidyverse", "timechange", "timeDate", "tinytex", "tzdb", "utf8", "uuid", "vctrs", "viridis", "viridisLite", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages("askpass")
install.packages("blob")
install.packages("boot")
install.packages("broom")
install.packages("bslib")
install.packages("cachem")
install.packages("callr")
install.packages("class")
install.packages("cli")
install.packages("cli")
install.packages("clock")
install.packages("cluster")
install.packages("codetools")
install.packages("colorspace")
install.packages("commonmark")
install.packages("config")
install.packages("cpp11")
install.packages("crosstalk")
install.packages("curl")
install.packages("data.table")
install.packages("DBI")
install.packages(c("dbplyr", "digest", "dplyr", "DT", "dtplyr", "e1071", "evaluate", "fansi", "forcats", "foreign", "fs", "future", "future.apply", "gam", "gapminder", "gargle", "gbm", "ggplot2", "ggrepel", "glmnet", "globals", "glue", "googledrive", "googlesheets4", "gplots", "gtable", "gtools", "hardhat", "haven", "hms", "htmlwidgets", "httpuv", "httr", "infer", "janitor", "jsonlite", "keras", "KernSmooth", "knitr", "labeling", "later", "lattice", "lava", "leaflet", "lifecycle", "listenv", "lubridate", "markdown", "MASS", "Matrix", "mgcv", "modelr", "munsell", "naniar", "nlme", "nnet", "norm", "openssl", "packrat", "parallelly", "patchwork", "plotly", "pls", "plyr", "prettyunits", "pROC", "processx", "prodlim", "progress", "progressr", "promises", "ps", "purrr", "RcppEigen", "readr", "readxl", "recipes", "rematch", "reprex", "reticulate", "rlang", "rmarkdown", "rpart", "rpart.plot", "rprojroot", "rsconnect", "rstudioapi", "rvest", "scales", "sf", "shape", "shiny", "signal", "snakecase", "sp", "spatial", "stringi", "stringr", "survival", "sys", "tensorflow", "terra", "tfruns", "tictoc", "tidyr", "tidyselect", "tidyverse", "timechange", "timeDate", "tinytex", "utf8", "uuid", "vctrs", "viridis", "viridisLite", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("dbplyr", "digest", "dplyr", "DT", "dtplyr", "e1071", "evaluate", "fansi", "forcats", "foreign", "fs", "future", "future.apply", "gam", "gapminder", "gargle", "gbm", "ggplot2", "ggrepel", "glmnet", "globals", "glue", "googledrive", "googlesheets4", "gplots", "gtable", "gtools", "hardhat", "haven", "hms", "htmlwidgets", "httpuv", "httr", "infer", "janitor", "jsonlite", "keras", "KernSmooth", "knitr", "labeling", "later", "lattice", "lava", "leaflet", "lifecycle", "listenv", "lubridate", "markdown", "MASS", "Matrix", "mgcv", "modelr", "munsell", "naniar", "nlme", "nnet", "norm", "openssl", "packrat", "parallelly", "patchwork", "plotly", "pls", "plyr", "prettyunits", "pROC", "processx", "prodlim", "progress", "progressr", "promises", "ps", "purrr", "RcppEigen", "readr", "readxl", "recipes", "rematch", "reprex", "reticulate", "rlang", "rmarkdown", "rpart", "rpart.plot", "rprojroot", "rsconnect", "rstudioapi", "rvest", "scales", "sf", "shape", "shiny", "signal", "snakecase", "sp", "spatial", "stringi", "stringr", "survival", "sys", "tensorflow", "terra", "tfruns", "tictoc", "tidyr", "tidyselect", "tidyverse", "timechange", "timeDate", "tinytex", "utf8", "uuid", "vctrs", "viridis", "viridisLite", "vroom", "withr", "xfun", "xml2", "yaml"))
library(shiny); runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/bslibtest.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/bslibtest.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/bslibtest.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/bslibtest.R')
library(shiny)
library(readxl)
library(tidyverse)
library(DT)
library (dygraphs)
sites <- read_xlsx('data/Temperature Site Names.xlsx')
temp <- read.csv('data/daily-avg-tmp.csv')
View(temp)
temp_means <- temp %>% group_by(Date) %>% summarise(avg = mean(Temp))
View(temp_means)
temp_means <- temp %>% group_by(Date) %>% summarise(avg = mean(Temp), min = min(Temp), max = max(Temp))
View(temp_means)
View(temp_means)
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/bslibtest.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/bslibtest.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/bslibtest.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/bslibtest.R')
temp_stats <- temp %>% summarise(avg = mean(Temp), min = min(Temp), max = max(Temp))
sites <- read_xlsx('data/Temperature Site Names.xlsx')
temp <- read.csv('data/daily-avg-tmp.csv')
temp_stats <- temp %>% summarise(avg = mean(Temp), min = min(Temp), max = max(Temp))
View(temp_stats)
View(temp)
temp <- temp[!(is.na(temp$Temp)), ]
temp_stats <- temp %>% summarise(avg = mean(Temp), min = min(Temp), max = max(Temp))
View(temp_stats)
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/bslibtest.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/bslibtest.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/bslibtest.R')
readRDS('temp.rds')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/bslibtest.R')
library(shiny); runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/bslibtest.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/bslibtest.R')
readRDS('data/temp.rds')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/bslibtest.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/bslibtest.R')
temp <- readRDS('data/temp.rds')
temp <- readRDS('data/temp.rds')
temp_stats <- temp %>% group_by(Date)%>% summarise(avg = mean(Temp), min = min(Temp), max = max(Temp))
library(shiny); runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/testfilters.R')
getwd()
setwd("/Users/actt/Documents/GitHub/CapstoneMSDS24.3/RShiny/")
temp <- readRDS('data/temptest.rds')
library(shiny)
library(readxl)
library(tidyverse)
library(DT)
library (dygraphs)
temp <- readRDS('data/temptest.rds')
View(temp)
library(shiny)
library(readxl)
library(tidyverse)
library(DT)
library (dygraphs)
temp <- readRDS('data/temptest.rds')
View(temp)
temp_long <- temp %>% pivot_longer(!Date, names_to = 'Site', values_to = 'Temp')
View(temp_long)
temp_stats <- temp %>%
pivot_longer(!Date, names_to = 'Site', values_to = 'Temp') %>%
group_by(Date) %>%
summarize(avg = mean(Temp))
View(temp_long)
bah <- Temp %>%
rowwise() %>%
mutate(test_mean = mean(), na.rm=TRUE))
bah <- Temp %>%
rowwise() %>%
mutate(test_mean = mean(), na.rm=TRUE)
bah <- temp %>%
rowwise() %>%
mutate(test_mean = mean(), na.rm=TRUE)
bah <- temp %>%
rowwise() %>%
mutate(test_mean = mean(c_across(where(is.numeric))), na.rm=TRUE)
View(temp)
View(bah)
temp %>% mutate(mean = rowMeans(pick(where(is.numeric), -Date)))
temp %>% summarise(mean = rowMeans(pick(where(is.numeric), -Date)))
temp %>% summarise(mean = rowMeans(pick(where(is.numeric), -Date, na.rm = TRUE)))
temp %>% summarise(mean = rowMeans(pick(where(is.numeric), -Date), na.rm = TRUE))
temp %>% mutate(mean = rowMeans(pick(where(is.numeric), -Date), na.rm = TRUE))
temp %>% summarize(mean = rowMeans(pick(where(is.numeric), -Date), na.rm = TRUE))
temp %>% summarize(mean = rowMeans(pick(where(is.numeric)), na.rm = TRUE))
temp <- as.data.frame(temp)
temp %>% summarize(mean = rowMeans(pick(where(is.numeric)), na.rm = TRUE))
#temp <- as.data.frame(temp)
temp %>% rowwise(Date) %>% summarize(mean = rowMeans(pick(where(is.numeric)), na.rm = TRUE))
#temp <- as.data.frame(temp)
temp %>% rowwise(Date) %>% summarize(mean = rowMeans(pick(where(is.numeric)), na.rm = TRUE), min = rowMin(pick(where(is.numeric)), na.rm = TRUE))
#temp <- as.data.frame(temp)
temp %>% rowwise(Date) %>% summarize(mean = rowMeans(pick(where(is.numeric)), na.rm = TRUE), min = rowMins(pick(where(is.numeric)), na.rm = TRUE))
install.packages("matrixStats")
install.packages("tensorflow")
library(shiny)
library(readxl)
library(tidyverse)
library(DT)
library (dygraphs)
library(matrixStats)
#temp <- as.data.frame(temp)
temp %>% rowwise(Date) %>% summarize(mean = rowMeans(pick(where(is.numeric)), na.rm = TRUE), min = rowMins(pick(where(is.numeric)), na.rm = TRUE))
#temp <- as.data.frame(temp)
temp %>% rowwise(Date) %>% summarize(mean = rowMeans(pick(where(is.numeric)), na.rm = TRUE), min = rowMins(as.matrix(temp)), na.rm = TRUE))
#temp <- as.data.frame(temp)
temp %>% rowwise(Date) %>% summarize(mean = rowMeans(pick(where(is.numeric)), na.rm = TRUE), min = rowMins(as.matrix(temp)), na.rm = TRUE)
rowMins(temp)
rowMins(as.matrix(temp))
rowMins(as.matrix(temp), cols = pick(where(is.numeric)))
rowMins(as.matrix(temp), cols = where(is.numeric))
rowMins(as.matrix(temp), cols = -Date))
rowMins(as.matrix(temp), cols = !Date, na.rm = TRUE)
rowMins(as.matrix(temp[, 1::]), na.rm = TRUE)
rowMins(as.matrix(temp[, 1:]), na.rm = TRUE)
temp[, 1:]
temp[, 1;]
temp[, -Date]
rowMins(as.matrix(subset(temp, select = -c(Date)), na.rm = TRUE)
rowMins(as.matrix(subset(temp, select = -c(Date)), na.rm = TRUE))
test <- rowMins(as.matrix(subset(temp, select = -c(Date)), na.rm = TRUE))
cbind(temp$date, rowMins(as.matrix(subset(temp, select = -c(Date)), na.rm = TRUE)))
cbind(temp$Date, rowMins(as.matrix(subset(temp, select = -c(Date)), na.rm = TRUE)))
data.frame(temp$Date, rowMins(as.matrix(subset(temp, select = -c(Date)), na.rm = TRUE)))
data.frame(temp$Date, min = rowMins(as.matrix(subset(temp, select = -c(Date)), na.rm = TRUE)))
#temp <- as.data.frame(temp)
#temp %>% rowwise(Date) %>% summarize(mean = rowMeans(pick(where(is.numeric)), na.rm = TRUE), min = rowMins(as.matrix(temp)), na.rm = TRUE)
rowMins(as.matrix(subset(temp, select = -c(Date)), na.rm = TRUE)
rowMins(as.matrix(subset(temp, select = -c(Date)), na.rm = TRUE))
test <- rowMins(as.matrix(subset(temp, select = -c(Date)), na.rm = TRUE))
View(temp)
subset(temp, select = -c(Date)
test <- subset(temp, select = -c(Date))
bahbah <- subset(temp, select = -c(Date))
View(bahbah)
#temp <- as.data.frame(temp)
#temp %>% rowwise(Date) %>% summarize(mean = rowMeans(pick(where(is.numeric)), na.rm = TRUE), min = rowMins(as.matrix(temp)), na.rm = TRUE)
test <- rowMins(as.matrix(subset(temp, select = -c(Date)), na.rm = TRUE))
test
#temp <- as.data.frame(temp)
#temp %>% rowwise(Date) %>% summarize(mean = rowMeans(pick(where(is.numeric)), na.rm = TRUE), min = rowMins(as.matrix(temp)), na.rm = TRUE)
test <- rowMins(as.matrix(subset(temp, select = -c(Date)), na.rm = TRUE))
test <- rowMins(subset(temp, select = -c(Date), na.rm = TRUE))
test <- rowMins(asMatrix(subset(temp, select = -c(Date)), na.rm = TRUE))
test <- rowMins(as_Matrix(subset(temp, select = -c(Date)), na.rm = TRUE))
test <- rowMins(as_matrix(subset(temp, select = -c(Date)), na.rm = TRUE))
test <- rowMins(as_matrix(subset(temp, select = -c(Date)), na.rm = TRUE))
as.matrix(
#temp <- as.data.frame(temp)
test2 <- temp %>% rowwise(Date) %>% summarize(mean = rowMeans(pick(where(is.numeric)), na.rm = TRUE)), na.rm = TRUE)
View(test2)
#temp <- as.data.frame(temp)
test2 <- temp %>% rowwise(Date) %>% summarize(mean = rowMeans(pick(where(is.numeric)), na.rm = TRUE))
View(test2)
#temp <- as.data.frame(temp)
test2 <- temp %>% rowwise(Date) %>% summarize(mean = rowMeans(pick(where(is.numeric)), na.rm = TRUE), min = min(pick(where(is.numeric))))
View(test2)
#temp <- as.data.frame(temp)
test2 <- temp %>% rowwise(Date) %>% summarize(mean = rowMeans(pick(where(is.numeric)), na.rm = TRUE), min = min(pick(where(is.numeric), na.rm = TRUE)))
#temp <- as.data.frame(temp)
test2 <- temp %>% rowwise(Date) %>% summarize(mean = rowMeans(pick(where(is.numeric)), na.rm = TRUE), min = min(pick(where(is.numeric)), na.rm = TRUE))
View(temp_stats)
View(test2)
#temp <- as.data.frame(temp)
test2 <- temp %>% rowwise(Date) %>%
summarize(mean = rowMeans(pick(where(is.numeric)), na.rm = TRUE),
min = min(pick(where(is.numeric)), na.rm = TRUE),
max = max(pick(where(is.numeric)), na.rm = TRUE))
View(temp_stats)
View(test2)
runApp('testfilters.R')
runApp('testfilters.R')
runApp('testfilters.R')
runApp('testfilters.R')
runApp('testfilters.R')
