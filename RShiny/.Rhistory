View(df)
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/Filters.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/Filters.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/Filters.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/Filters.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/Filters.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/Filters.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/Filters.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/Filters.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/Filters.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/Filters.R')
filter(df, ward5 == 0)
library(shiny); runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/TestApp.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/Filters.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/Filters.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/Filters.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/Filters.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/Filters.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/Filters.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/Filters.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/Filters.R')
library(shiny)
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/debug.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/debug.R')
ui <- fluidPage(
titlePanel("title panel"),
sidebarLayout(
sidebarPanel("sidebar panel"),
mainPanel("main panel")
)
)
library(shiny)
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/debug.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/debug.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/debug.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/debug.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/debug.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/debug.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/debug.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/debug.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/debug.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/debug.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/debug.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/debug.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/debug.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/debug.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/debug.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/debug.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/debug.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/debug.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/debug.R')
df <- read.csv("mergetemp_test.csv")
df2 <- mutate(df, Date = as.Date(Date, format= "%Y-%m-%d"))
ggplot(data = sites_subset, aes(x = Date, y = Temp)) + geom_point()
library(shiny)
library(tidyverse)
library(DT)
ggplot(data = df, aes(x = Date, y = Temp, color = ward5)) + geom_point()
ggplot(data = df, aes(x = Date, y = Temp)) + geom_point(aes(color = ward5))
ggplot(data = df, aes(x = Date, y = Temp)) + geom_point(aes(color = factor(ward5)))
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/debug.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/debug.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/debug.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/debug.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/debug.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/debug.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/debug.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/debug.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/debug.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/debug.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/debug.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/debug.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/debug.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/debug.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/debug.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/debug.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/debug.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/debug.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/debug.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/debug.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/debug.R')
library(shiny); runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/scatterplot.R')
library(shiny); runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/combined_app.R')
install.packages("shiny")
library(shiny); runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/combined_app.R')
install.packages("shiny")
library(shiny); runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/combined_app.R')
install.packages("shiny")
library(shiny); runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/combined_app.R')
setwd('Users/actt/Documents')
getwd()
setwd('/Documents')
library(shiny); runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/scatterplot.R')
setwd('Users/actt/Documents/github')
setwd('Users/actt/Documents/')
getwd()
# Define server logic for slider examples ----
server <- function(input, output) {
# Reactive expression to create data frame of all input values ----
sliderValues <- reactive({
data.frame(
Name = c("Integer",
"Decimal",
"Range",
"Custom Format",
"Animation"),
Value = as.character(c(input$integer,
input$decimal,
paste(input$range, collapse = " "),
input$format,
input$animation)),
stringsAsFactors = FALSE)
})
# Show the values in an HTML table ----
output$values <- renderTable({
sliderValues()
})
}
library (shiny)
# Define UI for slider demo app ----
ui <- fluidPage(
# App title ----
titlePanel("Sliders"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar to demonstrate various slider options ----
sidebarPanel(
# Input: Simple integer interval ----
sliderInput("integer", "Integer:",
min = 0, max = 1000,
value = 500),
# Input: Decimal interval with step value ----
sliderInput("decimal", "Decimal:",
min = 0, max = 1,
value = 0.5, step = 0.1),
# Input: Specification of range within an interval ----
sliderInput("range", "Range:",
min = 1, max = 1000,
value = c(200,500)),
# Input: Custom currency format for with basic animation ----
sliderInput("format", "Custom Format:",
min = 0, max = 10000,
value = 0, step = 2500,
pre = "$", sep = ",",
animate = TRUE),
# Input: Animation with custom interval (in ms) ----
# to control speed, plus looping
sliderInput("animation", "Looping Animation:",
min = 1, max = 2000,
value = 1, step = 10,
animate =
animationOptions(interval = 300, loop = TRUE))
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Table summarizing the values entered ----
tableOutput("values")
)
)
)
# Define server logic for slider examples ----
server <- function(input, output) {
# Reactive expression to create data frame of all input values ----
sliderValues <- reactive({
data.frame(
Name = c("Integer",
"Decimal",
"Range",
"Custom Format",
"Animation"),
Value = as.character(c(input$integer,
input$decimal,
paste(input$range, collapse = " "),
input$format,
input$animation)),
stringsAsFactors = FALSE)
})
# Show the values in an HTML table ----
output$values <- renderTable({
sliderValues()
})
}
shinyApp(ui = ui, server = server)
data.frame(
Name = c("Integer",
"Decimal",
"Range",
"Custom Format",
"Animation"),
Value = as.character(c(input$integer,
input$decimal,
input$range[1]),
input$format,
input$animation)),
data.frame(
Name = c("Integer",
"Decimal",
"Range",
"Custom Format",
"Animation"),
Value = as.character(c(input$integer,
input$decimal,
input$range[1],
input$format,
input$animation)),
stringsAsFactors = FALSE)
data.frame(
Name = c("Integer",
"Decimal",
"Range",
"Custom Format",
"Animation"),
Value = as.character(c(input$integer,
input$decimal,
paste(input$range[1], collapse = " "),
input$format,
input$animation)),
stringsAsFactors = FALSE)
data.frame(
Name = c("Integer",
"Decimal",
"Range",
"Custom Format",
"Animation"),
Value = as.character(c(input$integer,
input$decimal,
paste(input$range, collapse = " "),
input$format,
input$animation)),
stringsAsFactors = FALSE)
library (shiny)
# Define UI for slider demo app ----
ui <- fluidPage(
# App title ----
titlePanel("Sliders"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar to demonstrate various slider options ----
sidebarPanel(
# Input: Simple integer interval ----
sliderInput("integer", "Integer:",
min = 0, max = 1000,
value = 500),
# Input: Decimal interval with step value ----
sliderInput("decimal", "Decimal:",
min = 0, max = 1,
value = 0.5, step = 0.1),
# Input: Specification of range within an interval ----
sliderInput("range", "Range:",
min = 1, max = 1000,
value = c(200,500)),
# Input: Custom currency format for with basic animation ----
sliderInput("format", "Custom Format:",
min = 0, max = 10000,
value = 0, step = 2500,
pre = "$", sep = ",",
animate = TRUE),
# Input: Animation with custom interval (in ms) ----
# to control speed, plus looping
sliderInput("animation", "Looping Animation:",
min = 1, max = 2000,
value = 1, step = 10,
animate =
animationOptions(interval = 300, loop = TRUE))
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Table summarizing the values entered ----
tableOutput("values")
)
)
)
# Define server logic for slider examples ----
server <- function(input, output) {
# Reactive expression to create data frame of all input values ----
sliderValues <- reactive({
data.frame(
Name = c("Integer",
"Decimal",
"Range",
"Custom Format",
"Animation"),
Value = as.character(c(input$integer,
input$decimal,
paste(input$range, collapse = " "),
input$format,
input$animation)),
stringsAsFactors = FALSE)
})
# Show the values in an HTML table ----
output$values <- renderTable({
sliderValues()
})
}
shinyApp(ui = ui, server = server)
library (shiny)
# Define UI for slider demo app ----
ui <- fluidPage(
# App title ----
titlePanel("Sliders"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar to demonstrate various slider options ----
sidebarPanel(
# Input: Simple integer interval ----
sliderInput("integer", "Integer:",
min = 0, max = 1000,
value = 500),
# Input: Decimal interval with step value ----
sliderInput("decimal", "Decimal:",
min = 0, max = 1,
value = 0.5, step = 0.1),
# Input: Specification of range within an interval ----
sliderInput("range", "Range:",
min = 1, max = 1000,
value = c(200,500)),
# Input: Custom currency format for with basic animation ----
sliderInput("format", "Custom Format:",
min = 0, max = 10000,
value = 0, step = 2500,
pre = "$", sep = ",",
animate = TRUE),
# Input: Animation with custom interval (in ms) ----
# to control speed, plus looping
sliderInput("animation", "Looping Animation:",
min = 1, max = 2000,
value = 1, step = 10,
animate =
animationOptions(interval = 300, loop = TRUE))
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Table summarizing the values entered ----
tableOutput("values")
)
)
)
# Define server logic for slider examples ----
server <- function(input, output) {
# Reactive expression to create data frame of all input values ----
sliderValues <- reactive({
data.frame(
Name = c("Integer",
"Decimal",
"Range",
"Custom Format",
"Animation"),
Value = as.character(c(input$integer,
input$decimal,
input$range[1]),
input$format,
input$animation)),
library (shiny)
# Define UI for slider demo app ----
ui <- fluidPage(
# App title ----
titlePanel("Sliders"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar to demonstrate various slider options ----
sidebarPanel(
# Input: Simple integer interval ----
sliderInput("integer", "Integer:",
min = 0, max = 1000,
value = 500),
# Input: Decimal interval with step value ----
sliderInput("decimal", "Decimal:",
min = 0, max = 1,
value = 0.5, step = 0.1),
# Input: Specification of range within an interval ----
sliderInput("range", "Range:",
min = 1, max = 1000,
value = c(200,500)),
# Input: Custom currency format for with basic animation ----
sliderInput("format", "Custom Format:",
min = 0, max = 10000,
value = 0, step = 2500,
pre = "$", sep = ",",
animate = TRUE),
# Input: Animation with custom interval (in ms) ----
# to control speed, plus looping
sliderInput("animation", "Looping Animation:",
min = 1, max = 2000,
value = 1, step = 10,
animate =
animationOptions(interval = 300, loop = TRUE))
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Table summarizing the values entered ----
tableOutput("values")
)
)
)
# Define server logic for slider examples ----
server <- function(input, output) {
# Reactive expression to create data frame of all input values ----
sliderValues <- reactive({
data.frame(
Name = c("Integer",
"Decimal",
"Range",
"Custom Format",
"Animation"),
Value = as.character(c(input$integer,
input$decimal,
input$range[1],
input$format,
input$animation)),
stringsAsFactors = FALSE)
})
# Show the values in an HTML table ----
output$values <- renderTable({
sliderValues()
})
}
shinyApp(ui = ui, server = server)
sites <- read_xlsx('data/Temperature Site Names.xlsx')
library(shiny)
library(tidyverse)
library(DT)
sites <- read_xlsx('data/Temperature Site Names.xlsx')
library(shiny)
library(readxl)
library(tidyverse)
library(DT)
sites <- read_xlsx('data/Temperature Site Names.xlsx')
temp <- read.csv('data/daily-avg-tmp.csv')
test <- sites[15:30, "Temp_Alias"]
temp2 <- temp %>% filter(Site %in% sites[15:30, "Temp_Alias"]$Temp_Alias) %>% select(Date:Temp)
View(temp2)
View(temp)
View(sites)
View(test)
test <- sites %>% filter(RKM < 15 %and% RKM > 30) %>% select(Date:Temp)
test <- sites %>% filter(between(RKM, 15, 30)) %>% select(Date:Temp)
test <- sites %>% filter(between(sites$RKM, 15, 30)) %>% select(Date:Temp)
test <- sites %>% filter(between(sites$RKM, 15, 30)) %>% select()
#temp2 <- temp %>% filter(Site %in% sites[15:30, "Temp_Alias"]$Temp_Alias) %>% select(Date:Temp)
View(test)
View(sites)
test <- sites %>% filter(between(sites$RKM, 15, 30)) %>% select(SITE_NO:ALT_NAME)
#temp2 <- temp %>% filter(Site %in% sites[15:30, "Temp_Alias"]$Temp_Alias) %>% select(Date:Temp)
View(test)
test <- sites %>% filter(between(sites$RKM, 15, 30)) %>% select(Temp_Alias)
temp2 <- temp %>% filter(Site %in% test) %>% select(Date:Temp)
View(temp2)
test <- sites %>% filter(between(sites$RKM, 15, 30)) %>% select(Temp_Alias)
temp2 <- temp %>% filter(Site %in% test$Temp_Alias) %>% select(Date:Temp)
View(temp2)
test <- c(sites %>% filter(between(sites$RKM, 15, 30)) %>% select(Temp_Alias))
#temp2 <- temp %>% filter(Site %in% test$Temp_Alias) %>% select(Date:Temp)
View(test)
test <- list(sites %>% filter(between(sites$RKM, 15, 30)) %>% select(Temp_Alias))
#temp2 <- temp %>% filter(Site %in% test$Temp_Alias) %>% select(Date:Temp)
View(test)
test <- sites %>% filter(between(sites$RKM, 15, 30)) %>% select(Temp_Alias)
test2 <- test2$Temp_Alais
test2 <- test2$Temp_Alias
test <- sites %>% filter(between(sites$RKM, 15, 30)) %>% select(Temp_Alias)
test2 <- test2$Temp_Alias
test <- sites %>% filter(between(sites$RKM, 15, 30)) %>% select(Temp_Alias)
test2 <- test$Temp_Alias
#temp2 <- temp %>% filter(Site %in% test$Temp_Alias) %>% select(Date:Temp)
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/testfilters.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/testfilters.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/testfilters.R')
thing <- sort(unique(ites$Temp_Alias))
thing <- sort(unique(sites$Temp_Alias))
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/testfilters.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/testfilters.R')
data.frame(
Name = c("Integer",
"Decimal",
"Range",
"Custom Format",
"Animation"),
Value = as.character(c(input$integer,
input$decimal,
input$range[1],
input$format,
input$animation)),
stringsAsFactors = FALSE)
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/testfilters.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/testfilters.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/testfilters.R')
max(temp$Date)
sites <- read_xlsx('data/Temperature Site Names.xlsx')
temp <- read.csv('data/daily-avg-tmp.csv')
temp <- mutate(temp, Date = as.Date(Date, format = "%Y-%m-%d"))
max(temp$Date)
min(temp$Date)
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/testfilters.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/testfilters.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/testfilters.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/testfilters.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/testfilters.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/testfilters.R')
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/testfilters.R')
a = as.Date('2015-12-01')
b = as.Date('2016-12-01')
a = as.Date('2015-12-01')
b = as.Date('2016-12-01')
temp %>% filter(between(temp$date, a, b)) %>%
select(Date:Temp)
temp %>% filter(between(temp$date, a, b)) %>% select(Date:Temp)
temp %>% filter(between(temp$Date, a, b)) %>% select(Date:Temp)
runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/testfilters.R')
library(shiny); runApp('Documents/GitHub/CapstoneMSDS24.3/RShiny/combined_app.R')
library(shiny); runApp('testfilters.R')
runApp('testfilters.R')
library(shiny); runApp('testfilters.R')
